<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html><head><title>AsteroidMeta: mmj2ProofAssistantFeedbackV20060129</title><link type="text/css" rel="stylesheet" href="wiki.css" /><meta name="robots" content="INDEX,NOFOLLOW" /><link rel="alternate" type="application/rss+xml" title="AsteroidMeta" href="index.html@action=rss" /><link rel="alternate" type="application/rss+xml" title="AsteroidMeta: mmj2ProofAssistantFeedbackV20060129" href="http://planetx.cc.vt.edu/AsteroidMeta?action=rss;rcidonly=mmj2ProofAssistantFeedbackV20060129" /></head><body class="http://planetx.cc.vt.edu/AsteroidMeta"><div class="header"><span class="gotobar bar"><a class="local" href="HomePage">HomePage</a> <a class="local" href="RecentChanges">RecentChanges</a> </span><h1><a title="Click to search for references to this page" href="http://planetx.cc.vt.edu/AsteroidMeta?search=mmj2ProofAssistantFeedbackV20060129">mmj2ProofAssistantFeedbackV20060129</a></h1></div><div class="content browse"><h1>Feedback About the new mmj2 Proof Assistant GUI Version 20060129</h1><p>The policy here at MMJ2 Research Labs, LTD. is to  catapult installation files over the castle walls, old school style. We love to hear the agonized shrieks  and outraged complaints of our customers :) &#x2026;So&#x2026;</p><p>Feel free to complain about the Proof Assistant here!!!</p><p>Complaints about other aspects of mmj2 &#x2013; general grievances -- should go here: <a class="local" href="mmj2Feedback">mmj2Feedback</a></p><hr /><h1>Links</h1><ul><li>mmj2 Main Page: <a class="local" href="mmj2">mmj2</a></li><li>mmj2 Proof Assistant Tutorial <a class="local" href="mmj2ProofAssistantTutorial">mmj2ProofAssistantTutorial</a></li><li>Please use the dedicated page for mmj2 Feedback/Questions: <a class="local" href="mmj2Feedback">mmj2Feedback</a></li><li>Here is a dedicated page for feedback about the mmj2 Proof Assistant GUI: <a class="local" href="mmj2ProofAssistantFeedback">mmj2ProofAssistantFeedback</a></li></ul><p>Comments about the new "Derive" Feature should be posted here: <a class="local" href="mmj2ProofAssistantDeriveFeature">mmj2ProofAssistantDeriveFeature</a></p><p>Thanks! --<a class="local" href="ocat">ocat</a></p><hr /><h1>Note for Newcomers</h1><p>Welcome!</p><p>Here is a tutorial: <a class="local" href="mmj2ProofAssistantTutorial">mmj2ProofAssistantTutorial</a></p><p>And this has more helpful information, including a "quick howto" and a detailed reference for the Proof Assistant GUI!</p><pre>     http://aux.planetmath.org/mmj2/
    </pre><p>For someone new to Metamath proving techniques, a good start is to save a copy of this page showing the first 100 proofs in set.mm and then work through proving them, one by one:</p><pre>    http://us.metamath.org/mpeuni/mmtheorems.html</pre><p>If you do not have unicode Math fonts you should go get them, but as a workaround use the GIF directories at Metamath, like this:</p><pre>    http://us.metamath.org/mpegif/mmtheorems.html</pre><p>The 100th theorem in set.mm is pm2.521, so in your mmj2 RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> file add this line right before the "LoadFile<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=LoadFile">?</a>" RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> line:</p><pre>    LoadEndpointStmtLabel,pm2.521</pre><p>That will reduce the GUI time by about 10 seconds by not loading 6000+ theorems, only the first 100.</p><p>Try it! I think the new mmj2 GUI is lots more fun than the metamath.exe Proof Assistant!</p><h1>Things I like about it</h1><p>1. The Edit/Cut and Edit/Paste options work well :)</p><p>2. I like the way it allows me to focus on the properties of the formulas instead of theorem labels. Last night I was working on re-proving the first 100 theorems and I was just <b>ripping</b> them: boom, boom, boom. Very nice! Labels may change but the properties of the formulas are forever.</p><dl class="quote"><dt /><dd>Interesting. Ray was working on something that seems abstractly similar, namely, some graphs for keeping track of the flow of proofs. I'd like to check out mmj2&#x2026; has anyone managed to build it on a Unix-alike system (e.g. in particular, a Mac)? --<a class="local" href="jcorneli">jcorneli</a></dd><dt /><dd>Yes, Alih has created a Linux build script -&#x2192; <a class="local" href="mmj2Feedback">mmj2Feedback</a>. It requires (Sun) Java SDK 1.5.? (06 is latest version) --<a class="local" href="ocat">ocat</a></dd></dl><h1>Installation Grievances</h1><p>1.</p><pre>    You say to download the "JDK 1.5 compiler (Java Development Kit)"
    from http://java.sun.com/j2se/1.5.0/download.jsp.
    There are several downloads on that page that mention "JDK" and
    none mention anything about a "1.5 compiler".  I selected "JDK 5.0
    Update 6". Perhaps it would be good to make this explicit.
    </pre><p>Good feedback. Will modify install.txt for the tidy-up release of 01-Mar-2006 (if not sooner :)</p><p>2.</p><pre>    When you say "Windows Command Prompt", you mean
    Start -&gt; Run -&gt; cmd, _not_ Start -&gt; Run -&gt; command.
    Maybe everyone "knows" this, but I rarely use it and
    keep mixing them up as I try to unremember my Windows 95 days.
    </pre><p>I should say Windows Command Prompt <b>Window</b>, which is the modern analogue of the old DOS Window under Windows 3.1 etc. What I do is Start/Programs/Accessories and then right mouse button click "Command Prompt" and select "Create Shortcut" to put the Command Prompt Window icon on the desktop.</p><p>3.</p><pre>    When I ran C:\mmj2\compile\windows\CompMMJ.bat I got:
    
    C:\tmp&gt;C:\mmj2\compile\windows\CompMMJ.bat
    ...
    C:\mmj2&gt;javac @compile\windows\javacTCompilePaths.txt   @compile\mmj\mmio\mmioClasses.txt 'javac' is not recognized as an internal or external command, operable program or batch file. &#x2026; C:\mmj2&gt;ECHO "*** CompMMJ<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=CompMMJ">?</a>.bat ERROR ENCOUNTERED!" "*** CompMMJ<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=CompMMJ">?</a>.bat ERROR ENCOUNTERED!" &#x2026;</pre><pre>    I had to do this:
        Start -&gt; Settings -&gt; Control Panel -&gt; System -&gt; Advanced -&gt;
        Environmental Variables -&gt; 
        edit Path to append ";C:\Program Files\Java\jdk1.5.0_06\bin"
        
    and restart the Windows Command Prompt.  
    (Later - I now see you mention this at the bottom of the page, 
    but it should probably be part of the in-line instructions.  
    Also, the path is obsolete in the bottom-of-page instructions.
    I wonder why Sun doesn't add to the Path in its Java installation?)</pre><p>So noted. Thanks!</p><p>4.</p><pre>    You might mention C:\mmj2\test\windows\BatchMMJ2Sample001.bat
    is the one for set.mm (or rather expset.mm).  Or perhaps a more
    obvious name? The others seem to be test cases that probably
    wouldn't be of general interest.
    </pre><p>C:\mmj2\test\windows\RunPAGUI<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunPAGUI">?</a>.bat is the <b>sample</b> to kick off the GUI Proof Assistant. What I am doing is setting up a separate directory/folder elsewhere that is customized for my proof studies. Like c:\myproofs and then copy "RunPAGUI<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunPAGUI">?</a>.bat" to there, along with its RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> file, "RunParmFileRunPAGUI<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParmFileRunPAGUI">?</a>.txt" (update the "LoadFile<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=LoadFile">?</a>" and "ProofAsstProofFolder<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=ProofAsstProofFolder">?</a>" RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> commands to point to the correct input files.</p><p>Then go into the Command Window and execute</p><pre>    cd: c:\myproofs
    runpagui
    </pre><p>Once you get yourself set up there should be no need to mess around with this stuff. I hope it works out well for you.</p><p>5. In the file C:\mmj2\test\windows\expandSetMM.bat, you have</p><pre>  cd c:\metamath\metamath</pre><p>However, based on the previous instructions at <a class="url" href="http://planetmath.cc.vt.edu/~mmj2/mmj2.html">http://planetmath.cc.vt.edu/~mmj2/mmj2.html</a> ("unzipping it to the "C" drive"), the correct command should be</p><pre>  cd c:\metamath</pre><p>(I realize you also say "make any directory changes", but it would be good if the default was correct.) &#x2013; <a class="local" href="norm">norm</a> 12-Mar-2006</p><h1>Suggestions and Things I do not like about it</h1><p>1. The proof text area is always in "Insert Mode", and the insert key doesn't toggle between replace and insert.</p><p>2. There is no Undo/Redo feature.</p><p>3. I want it to renumber the proof steps after I am done (even though I am proposing that to myself, my reaction to me is "Give me a freaking break!")</p><dl class="quote"><dt /><dd>The Proof Assistant does not require step numbers to be sequential or in ascending order. However, as a service to our loyal customers, who tend to like things neat and tidy, a Renumber capability will almost surely be added to the Edit Menu as an option in the next release (assuming that the sun continues to rise each morning, ocat continues breathing, not struck by lightning, etc.) --<a class="local" href="ocat">ocat</a> 12-Feb-2006</dd></dl><p>4. I want it to pop up an informational message whenever a proof is completed <b>and</b> the new proof's RPN is shorter than the RPN proof in the Metamath .mm file that was input. It would be a shame if someone in Timbuktu created an amazing new proof and did not tell anyone because s/he did not even notice that it was an improvement &#x2013; someone might assume that the total obviousness of the new proof was self-evident to all! :The program should provide a comparison count of the number of logical steps <b>and</b> RPN steps.</p><p>5. Have you asked <a class="url" href="http://www.nfb.org/">http://www.nfb.org/</a> for suggestions to make the mmj2 Proof Assistant GUI easier to use? :No response. Obviously, making sure error-cursor positioning works reliably is a biggie. And perhaps adding sound feedback for a) successful proof vs. b) parse error; vs. c) other error. Probably some other stuff</p><p>6. Make the start-up Proof Worksheet area, presently "syl", a RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> option. This would allow "stoppedhere.txt" to be used to pick up where left off, as well as customization.</p><p>7. Create pop-up formula building screen that loads a formula into the clipboard/cut-paste buffer. Keep the window open until closed. Allow expressions to be assigned to variables and plugged into selected formulas.</p><p>8. Is search/replace feasible?</p><p>9. For training exercises and review, it would be nice to have a "File/NewRandom<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=NewRandom">?</a>" menu option that randomly selects a theorem for proving.</p><p>10. Another training exercise feature would be to randomly generate theorems for proving. I am not sure how hard it would be to code something meaningful, but it would be educational. Seeing new formulas should help reinforce old lessons. (It is possible to load more than one Metamath file using multiple mmj2 LoadFile<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=LoadFile">?</a> RunParms<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParms">?</a>. No reason why a teacher cannot create supplementary files for homework.</p><p>11. Add code to the very beginning of BatchMMJ<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=BatchMMJ">?</a>2 to verify that the Java runtime environment is compatible with the compiled code. This would be useful if/when compiled code is distributed.</p><p>12. Consider building a distribution CD/zip containing everything needed to just run mmj2 Proof Assistant, including a sample of the first 1000 set.mm theorems AND a user manual. It should be set up to run from the unzipped directory, as-is. Try the "jar" technique for simplicity. Make the directory names completely separate from the existing mmj2 directory structure. Try to find some educational material to either include or link to, as well as the obligatory linkbacks and license stuff for Metamath, mmj2, etc.</p><p>13. It seems as if elementary boolean logic could be taught to high school sophomores as a supplement to the standard (American) Euclidean Geometry course. What needs to happen to make the mmj2 Proof Assistant approachable for beginners? Video training material on DVD's with instructors that look like Lara Croft? Things to check out:</p><p><a class="url outside" href="http://www2.math.uic.edu/~kauffman/Robbins.htm">The Robbins Problem</a></p><p><a class="url outside" href="http://open-site.org/Science/Mathematics/Applied/Cybernetics/K1_and_K2_-_General_Cybernetics/Semiotics/">Cybernetics and Semiotics</a></p><p>14. (from Raph): "You should be able to sit on qed, enter a label, and have it spit out the terms needed."</p><p><a class="local" href="mmj2ProofAssistantDeriveFeature">mmj2ProofAssistantDeriveFeature</a> &#x2013; Proposed 'Derive' Feature Specs</p><h1>Bugs and Things that do not work as expected</h1><p>1. The cursor positioning code is mentally challenged.</p><p>2. The default file type is ".txt" for mmj2 proof files. I  expected it to be ".mmp". (Should I mmj2 have a RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> to define the user's preferred file type or just stick with .txt as the default and ".mmp" as the accepted alternative?) </p><dl class="quote"><dt /><dd>Keep this as-is. The ".txt" suffix makes it clear that a "Proof Worksheet" AKA "Proof Text area" is just a text area.</dd></dl><p>3. I should have gotten a warning message from mmj.verify.Grammar when using the old set.mm about the overloading of "=" by syntax axioms weq and wceq. Grammar went ahead and built the Grammar Rules but 10% of set.mm theorems could not be unified in Proof Assistant without modifying weq to be a "syntax theorem". Likewise for wel/wcel and wsb/wsbc.</p><p>4. It is impossible to prove the "dummylink" theorem.</p><dl class="quote"><dt /><dd>If <b>dummylink</b> is located prior to every axiom then the Proof Assistant GUI cannot complete Unification because it is unable to find a previous assertion (axiom or theorem) to justify the derivation. However, if dummylink is moved to the location immediately following ax-mp, a proof is easily derived. The fact that dummylink can be proven using Metamath signifies that "Reiteration" is built-in to the Metamath Proof Verification Engine (in every program based on the metamath.pdf specification.) Reiteration is the  rule or axiom of reasoning that says "if A is true then A is true". It is called "Reiteration" because it allows any previously derived or given step to be repeated ("reiterated") as a proof step. The Metamath proof for dummylink, "wph" relies upon Reiteration implicitly, but the mmj2 Proof Assistant GUI requires that <b>Ref</b> labels, which justify proof steps point to previous Assertions. --<a class="local" href="ocat">ocat</a><dl class="quote"><dt /><dd>"dummylink" is not a theorem in the strict formal sense. In a Hilbert-style system - for which Metamath was designed - a "theorem" is defined as the final step in a sequence of steps, each of which is an axiom instance or the result of an inference rule (ax-mp, ax-gen) applied to earlier steps. Anything else is a metalogical device, or shortcut, to help us prove things more efficiently. One such shortcut is the ability to reference earlier theorems, not just axioms. Another shortcut is the ability to prove statements that have hypotheses, that strictly speaking we should call "deductions" or "inferences" rather than "theorems". Both of these shortcuts are conservative extensions of the logic of any Hilbert style system, no matter how weak: they are eliminable and have no effect on what actual theorems are provable, except that the proofs would be much longer. In particular, if we have no axioms - which is the weakest possible logical system - then we cannot prove any theorems (in the strict formal sense). In this sense, Metamath is indeed 100% logically agnostic. from --<a class="local" href="norm">norm</a> 13-Feb-2006<dl class="quote"><dt /><dd>See for more info: <a class="url outside" href="http://www-ls.informatik.uni-tuebingen.de/psh/forschung/publikationen/RoutledgeFLS1995.pdf">Formal Languages And Systems</a> --<a class="local" href="ocat">ocat</a> 13-Feb-2006</dd></dl></dd></dl></dd></dl><h1>Reply to Specific Questions in an email</h1><p>Hello "Mr Big",</p><p>I hear you.</p><p>I don't know if you're using Windows Explorer to look at the file directory structure and contents of c:\mmj2. There is a lot of stuff mentioned in c:\mmj2\doc. Specifically answering your questions are:</p><pre>     c:\mmj2\doc\ProofAssistantGUIQuickHOWTO.html
     
     c:\mmj2\doc\ProofAssistantGUIDetailedInfo.html
     </pre><p>Those are included in-toto in the "mmj2.html" web page available at:</p><pre>     http://aux.planetmath.org/mmj2/
     </pre><p>I also answer your specific questions now:</p><p>What are the syntax requirements of proof step labels?</p><pre>     --&gt; 1, 2, ... n except for final step number which 
         must be 'qed'. can be 10, 20, ... 
     </pre><p>Must they be in numerical order?</p><pre>     --&gt; No, but a hypothesis reference must be to a
         previous step in the proof (like 2:1 |- blabblah
         where "2:1" means step 2 has previous step 1 as a 
         hypothesis for formula "|- blahblah".
     </pre><p>Must hypothesis step labels start with h?</p><pre>     --&gt; yes. file/new will build the skeleton for you.
     </pre><p>Do you type in the actual proof steps?</p><pre>     --&gt; sometimes. also cut and paste the step being
         derived from. cut and pasted the "com*" proofs
         and it was magical the way PA finished the 
         proofs!
     </pre><p>At what point do you attempt to unify - as you are doing the proof, or only at the end?</p><pre>     --&gt; you can unify step by step or wait until 
         the end. for steps that are un-finished, like
         the qed step, you can put hypothesis = "?"
         signifying "I don't know yet". that allows you
         to work backwards, too! 
     </pre><p>An example of what you actually do - maybe down  to keystrokes and mouse clicks, maybe even including how you recover from dumb typos you  make - as you "rip" through a proof would help  people overcome that big initial learning hurdle.</p><pre>     --&gt; I hear you! Try out the various Menu items
     including the Help screen (which is probably where
     I would put a tutorial?)
     </pre><h1>Some ideas for the long-term</h1><p>Hi <a class="local" href="ocat">ocat</a>,</p><p>Congratulations on your Proof Assistant GUI!</p><p>In my ramblings that follow, it is easy for me throw out ideas, since I'm not doing the hard work. :) Nonetheless some of them might be useful to contemplate for the long term, or at least serve to inspire further discussion.</p><p>1. Even though one of its purposes is to avoid the need for memorizing labels - and that is good - I believe labels can still be useful. Most people probably become familiar with at least a few very common ones, and when you do know the label, it is more efficient to type it than to type a string of special ASCII characters. Yes, there is copy-and-paste, but at some point you have to type the starting symbol string. Anyway, the idea would be to let you bring in a known theorem as a template for a proof step. It would be like the reverse of your Unify - instead of typing in the symbols and having the PA find the theorem, you would type in the theorem label after the  "::" and it would fill the symbols (or a template when they can't be determined - see #5 below).</p><dl class="quote"><dt /><dd>ok, this one is doable! <a class="local" href="ocat">ocat</a> 4-Feb-2006</dd><dt /><dd>I believe the cleanest approach is for the user to enter the label and then completely erase all vestiges of the formula's tokens, so that the next token after the label marks the start of the next step (or comment line). The program will see the formula's total absence as an unambiguous gesture, and if the formula is not erased then the program will deal with the  input label in the usual manner. Generation of the formula will require validation that the step's hypotheses are valid for the label &#x2013; and they will need to be unified with the variables in the label's assertion (and against each other). Any variables in the label's assertion that are not present in the referenced hypotheses (if any), will be displayed  unchanged; that means a label reference involving no hypotheses will result in display of the label's assertion without change. --<a class="local" href="ocat">ocat</a> 6-Feb-2006</dd></dl><p>2. There are theorems like <a class="url outside" href="http://us2.metamath.org:8888/mpegif/syl.html">syl</a> that are used all the time. Perhaps the most-used 20 or 100 theorems could be presented in a drop-down list to choose from, kind of like the drop-down list of axioms in Metamath Solitaire.</p><p>3. Obviously, I have become expert at using the CLI PA. While I probably have memorized many more labels than anyone else, I really have only the most common ones - maybe a few hundred? - on the "tip of my tongue" as it were, out of the 6000+. I am generally aware, at least vaguely, of general categories of theorems available, but have a poor memory for their exact forms, variable names, etc., and rarely remember labels of the lesser used ones. The most useful feature in the CLI, for me, is the 'search' command with its wildcards. Next to the actual 'assign' statement (and possibly 'delete'/'initialize'/'unify' to fix mistakes when I haven't had my coffee), 'search' is probably the most frequent command I use. </p><dl class="quote"><dt /><dd>The metamath.exe search can be simultaneously used in a separate window. Plus, cut-and-paste should be possible between mmj2 and Metamath.exe's window, at least under Windows (I don't know that Linux has an inter-application "clipboard".)</dd></dl><p>4. I think the biggest drawback of the current CLI is that it forces you to work backwards, so you pretty much have to have to proof worked out on paper or in your head before you even start. In principle the power of GUI could let you work on different, independent pieces of the proof, eventually bringing them together and perhaps discarding some that are failed experiments. </p><dl class="quote"><dt /><dd>This is a feature of the GUI. Steps do not have to connect to anything, they simply have to operate within the Frame of the theorem being proved. Put a "?" in the Hyp field of a step if the hypothesis step is not ready yet.</dd></dl><p>5. An ideal GUI might somehow combine the backwards proving method of metamath's CLI with the forward method of the Metamath Solitaire applet, giving us the best of both worlds. Along those lines, for the forward method especially there will have to be temporary variables, analogous the unknown $1, $2, etc. in the CLI PA. I could see the user highlighting one of the variables and pasting an expression on top of it, then watch as the same expression ripples into all occurrences of that variable throughout the proof.</p><p>6. Just as in the CLI PA, when a label is assigned to an expression with the temporary variables mentioned in #5, it would be checked on the fly to see if it could be unified, and if so, then the temporary variables would be replaced according to the unification just as in the present CLI PA.</p><p>7. If I'm working on two disconnected pieces of the proof, sometimes I know that this subexpression of wff A is going to match that subexpression of wff B when pieces are finally put together. But it would be nice to know what it would look like before we actually connect them. I can envision the following advanced feature: you highlight subexpression 1, ctrl-highlight subexpression 2 (ctrl so the 1st highlight won't go away), then Unify. Variable replacements to make them match would take place, propagating through the rest of the proof as required.</p><p>8. (A possibly hard example for the present PA GUI?) I am curious: how would you prove <a class="url outside" href="http://us2.metamath.org:8888/mpegif/biigb.html">biigb</a> (if your goal is to obtain that particular proof, not the normal one)? Can it be done, practically? In Metamath Solitaire, it would be 17 clicks on the drop-down axiom list, and the incredibly long steps would automatically be created by the unification. (In effect, these clicks are specifying labels to assign.) This is one case where I'd prefer to type labels instead of entering symbol strings.</p><p>9. (Another possibly hard example for the present PA GUI?) Another case like this was the proof of <a class="url outside" href="http://us2.metamath.org:8888/mpegif/grothprim.html">grothprim</a>. The statement of the theorem was actually clipped from a partial proof - I didn't type it in. What I did was temporarily specify "$p |- ( [ax-groth] &lt;- &gt; ph )" where "ph" served no purpose other than giving us a legal wff. Then (proving backwards) I broke this up with bitr over and over, each time applying more definitions into [ax-groth], until they were all eliminated. I ended up with the unknown step "|- ( [longexpression] &lt;- &gt; ph )" and clipped out [longexpression] from 'show proof' to create the final theorem statement. So in a sense I was tricking the "backwards prover" of the CLI to act like the "forwards prover" of MM Solitaire.</p><p>--<a class="local" href="norm">norm</a> 3-Feb-2006</p><h1>Combining PA GUI and CLI - an interim solution?</h1><p>An "ideal" Proof Assistant GUI might eventually have, in one form or another, the features currently available in the metamath program's PA CLI ("MM-PA"). Some of these might be improved by implementing a graphical equivalent. For example, the current PA GUI ("mmj2") implements an more flexible version of the MM-PA's "let step n =" assignment via pasting to a cursor position. Other features might exist in dual form, say by analogy with a text editor that does the normal GUI stuff in the typing area but also has a place at the bottom to enter a command line.</p><p>In its present form, I will most likely use mmj2 in some combination with MM-PA, using one or the other depending on which is the most efficient for the task at hand.</p><p>As time goes on, I can imagine that more MM-PA features will slowly be integrated into mmj2, but in the meantime it would be very useful if we could seamlessly go back and forth between them. Right now it is awkward, requiring an edit to or rewrite of the source file, and exiting/reentering the metamath program (or 'erase'/'read').</p><p>Here is what I envision, which could hopefully give us, as an interim measure, the best of the two currently existing approaches without a whole lot of pain. On the computer screen, we would have two windows open, one for mmj2 and the other for MM-PA. We would define an import/export format for partially completed proofs understood by each, that allows them to communicate while they are in their respective sessions. Each would have a command to refresh its partial proof with the one exported by the other, without having to exit either proof session. This way we could go back and forth to work on the proof with different tools.</p><p>MM-PA could be modified to read in a file with a standard RPN metamath proof, with the "?" convention for unknown steps. Of course, I would be the one making this modification. A new 'import' command would erase the existing proof in progress, read in the proof exported from mmj2, and unify.</p><p>I don't know what the best (easiest) format is for mmj2 to understand for partial proofs. Is it just the RPN partial proof with "?"s? Or are the actual step contents needed, since they may contain more information about the unknown steps? Metamath's 'show proof' can output proofs in various formats with varying levels of detail, and <a class="local" href="ocat">ocat</a> will have to tell me which would be best to adapt to an export format that mmj2 could easily read.</p><p>One of the problems (there are always problems!) would be that certain intermediate stages of partial proofs in mmj2 are not representable in MM-PA, and possibly vice-versa. For example, mmj2 can develop proofs in independent pieces, whereas MM-PA requires a partial proof built backwards in a single tree. I guess the only solution to this, short of a major rewrite of MM-PA, is either not allow the export when the proof is in one of the incompatible stages, or allow it with loss of information by overriding a warning.</p><dl class="quote"><dt /><dd>(Later) I now see there <em>is</em> a way to handle isolated proof pieces in MM-PA, so that no information will be lost. It would require a little more work to program the import/export routines, but it might be worth it to avoid throwing away isolated proof pieces. We would add to the database  a special dummy theorem:</dd></dl><pre>   dummylink.1 $e |- ph $.   $( Transparent pass-thru input. $)
   dummylink.2 $e |- ps $.   $( "Don't care" input. $)
   dummylink   $p |- ph $= dummylink.2 $.</pre><dl class="quote"><dt /><dd>This would be assigned to the last step of the partial proof of the theorem. The step (if any) that was previously assigned to the conclusion would instead be assigned to hypothesis dummylink.1 and would thus pass through to the conclusion unaffected. An isolated sub-proof would be assigned to dummylink.2 and would not affect the conclusion. By chaining these we can connect as many isolated pieces as we want so that any partial proof, from MM-PA's point of view, would consist of a single tree. The import and export routines would add/remove the dummylink statements for the MM-PA/mmj2 versions of the proof. When the proof is complete, all dummylink statements would disappear.</dd></dl><p>What do you think?</p><p><a class="local" href="norm">norm</a> 6-Feb-2006</p><dl class="quote"><dt /><dd>(8-Feb-2006) I added the <a class="url outside" href="http://us2.metamath.org:8888/mpegif/dummylink.html">dummylink</a> theorem to the database. Interestingly, it is quite useful on its own, independently of the GUI/CLI synchronization project, as its description suggests. I have already used it while working on a couple of new proofs. What I find very nice is that the MM-PA 'improve' command automatically assigns the independent proofs to matching unknown steps in the main proof, and the MM-PA 'minimize' command automatically cleans up the mess at the end by stripping out all the dummylink's. It is amazing that I've overlooked such a simple and powerful technique all these years. --<a class="local" href="norm">norm</a> 8-Feb-2006</dd></dl><hr /><p>Congratulations! I see that you have made  <a class="url outside" href="http://us2.metamath.org:8888/mpegif/dummylink.html">dummylink</a> the first theorem in the set.mm database? I am adding it to the mmj2 set.mm "ProofAsstUnifySearchExclude<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=ProofAsstUnifySearchExclude">?</a>" RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> to exclude it from the automatic matching process during Unification (the excluded labels can still be entered manually). Here is what I have now in the distributed file C:\mmj2\data\runparm\windows\RunParmFileRunPAGUI<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParmFileRunPAGUI">?</a>.txt</p><pre>    ProofAsstUnifySearchExclude,biigb,xxxid,dummylink
    </pre><p>Let me know if there are others that you know should be excluded. --<a class="local" href="ocat">ocat</a> 8-Feb-2006</p><hr /><p>I am planning an update to mmj2 for 1-May-2006 to incorporate the most important and doable enhancements. It will definitely have the label-input-instead-of-formula feature, and the play-Star-Spangled-Banner-when-proof-complete option.</p><p>As far as mmj2's Proof Assistant goes, the easiest solution is to have metamath.exe's PA be capable of reading the mmj2 "Proof Worksheet" AKA "Proof Text area" format. Then the mmj2 PA's user simply hits Save or File/Open to exchange data with MM PA. Nice!</p><p>The reason mmj2 PA abandons attempts to process RPN proofs containing '?'s is that it views proofs as trees and a missing RPN step can destroy structure (The attempt is made only in the testing-use "ProofAsstExportToFile<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=ProofAsstExportToFile">?</a>" RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> command that generates a Proof Worksheet from the Metamath proof and writes it to a file.)</p><p>P.S. In theory the mmj2 PA could kick out a specially formatted file (or copy to clipboard), but it would be best if the MM PA could just read the Proof Worksheet text. The MM PA need not go through the entire rigamarole that mmj2 does with the  101 different possible errors. Just kick it back if it isn't acceptable for import. Being able to read the Proof Worksheet text has other benefits, like being able to export/import with <b>other</b> proof systems, and keeping things simple for your users. I really don't know what you would want from a special export anyway. There are two parts needed for building the proof tree for each step: the unification variable substitution parse trees, and the proof step's hypotheses' proof trees; a step can be unified but if its hypotheses don't have proof trees themselves then it cannot have a proof tree. So&#x2026;essentially that means that mmj2 has a separate, possibly incomplete proof tree for each proof step that passes the unification process. Tricky to convert that mess without loss in both directions using RPN arrays, which is why I think having MM PA read the native Proof Worksheet format is ideal (bit of work on your end though :) <a class="local" href="ocat">ocat</a> 6-Feb-06</p><p>That sounds like a good approach. Is the Proof Worksheet format stable enough at this point to be considered a standard? <a class="local" href="norm">norm</a> 7-Feb-06</p><p>Yes, with provisos:</p><p>1) The new label-instead-of-theorem feature you requested/suggested represents a change to the validation -- i.e. the user can input "2:1:xyz" with no following formula.</p><p>2) The mmj2 PA allows $d statements to be input which are treated as additions to the theorem in the database. But it does not allow the input of new "dummy" variable/variable hypothesis definitions. And none of the statements are terminated with "$.", the Metamath standard.</p><p>Assuming that these design choices are not questioned, then there  are no other changes ahead to the text format of the "Proof Worksheet", which is a very minimalistic format.</p><p>P.S. #1 <b>need not</b> affect the MM PA import. When the user in mmj2 PA presses Ctrl-U, if there are no errors, the formula corresponding to "2:1:xyz" will be generated. In fact, a solid approach to the MM PA import might be to stipulate that an acceptable imported Proof Text area is what is displayed on the  mmj2 PA screen <b>after</b> Ctrl-U (Unification). That would mean that, as one example, the order of hypotheses on each proof step matches the the sequence of hypotheses of the Assertion specified by the step's Ref label &#x2013; which <b>is</b> the case after successful Unification (figuring out the sequence in mmj2 is a tricky bit of work.) The only "error" condition you would need to worry about would be "?" in the Hyp fields, which signifies that the step is not ready for Unification. And there could be the situation, as you covered, where there are multiple, unconnected sections of proof steps.</p><p>--<a class="local" href="ocat">ocat</a> 7-Feb-2006</p><h1>Feedback from Raph</h1><p>I tried it out and was generally fairly impressed. Cool!</p><p>I definitely agree with the sentiments above that it should be possible to make progress either by unification against term strings or by supplying a label. One thing I've thought about is tab completion for labels that match. If you're not sure which syl&lt;n&gt; to use, just type "syl" and hit tab.</p><p>Also, I think it's very useful to be able to work both backwards and forwards. You should be able to sit on qed, enter a label, and have it spit out the terms needed.</p><p>I looked at the code a bit, especially the Earley parser (because I need something similar to implement <a class="local" href="Ghilbert_syntax_plans">Ghilbert syntax plans</a>. I think the choice of the Earley parser is a sound one, but I'm a little less thrilled with the code. For one, in the face of ambiguity, I don't consider it acceptable to enumerate all valid parses - that leads to exponential blowup. For what I want to do, anyway, it's important to choose one ambiguous parse using precedence values. To this end, I've started hacking my own Earley parser in Python. I am curious, though, whether you've looked at any of the techniques to improve the performance of Earley parsing, such as <a class="url outside" href="http://www.cs.uvic.ca/~nigelh/pubs.html">Nigel Horspool's</a>.</p><p>--<a class="local" href="raph">raph</a> 18-Feb-2006</p><p>Thanks, Raph!</p><p>I will be providing the capability (god willing) to supply a label instead of a formula. This enhancement is contrary to the intention of the GUI, but the customer Rules :)</p><p>However, syl* matching is beyond where I am willing to go, at this time. It should not be needed; asis, if the user can provide the formulas the program will figure out the correct label.</p><p>I also note, fyi, that working forwards or backwards is already a feature. For step 'n', enter "?" in the Hyp sub-field of Step:Hyp:Ref, and the program allows Step 'n' to be used in subsequent steps as an hypothesis without requiring it to be completed. I may need to default the 'qed' step Hyp to "?" to make this more obvious (but did not because I wanted the error message to kick out in case the user wasn't sure what to do next &#x2013; now I am not so sure that is best.)</p><p>Re, Earley Parser. 1) The easy part is parsing. Putting the parse tree together from the Itemsets is the challenge.</p><p>2) mmj2/Grammar provides two modes, via RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a>, with the "basic" and "extended" ambiguity checking. For parsing this means that if "basic" is chosen, the first parse is taken, and if "extended" is chosen, then up to 'n' parses are generated, but still the first parse is taken. In practice, 'n' = 2 for "extended" (a hardcoded constant), but it is possible to generate an arbitrary number of parse trees for academic purposes (with a recompile.) The default is "basic" and 'n' = 1.</p><p>3) I did take a quick look at various options for enhancing the algorithm but ended up doing my own optimization of Grune's algorithm:</p><p><a class="url" href="http://www.cs.vu.nl/%7Edick/PTAPG.html">http://www.cs.vu.nl/%7Edick/PTAPG.html</a></p><p>If you look at the code for completed items, the "bring forward" is done only once for each <b>type</b>, and that is a significant bit right there. I added a couple of other enhancements as well, including the lookahead by 1 and sorting the Earley Rules  by database sequence (See mmj.lang.Cnst.java for "earley".)</p><p>The rotten part of my Earley Parser is the tree building after the parse. I had to do that part twice. The first attempt used recursive calls and was incomprehensible immediately after it was written. The replacement is still really hard to understand.</p><p>4) Your suggestion, "You should be able to sit on qed, enter a label, and have it spit out the terms needed." sounds great. I added it to the suggestion list above. I'll have  to think about it in terms of doability and how much it is really needed (there is apparently no substitute for mathematical skill &#x2013; Norm can work miracles with a pencil and the fastest supercomputer in the galaxy still won't make me smart :)</p><p>--<a class="local" href="ocat">ocat</a> 18-Feb-2006</p><h1>Transporting a mmj2 to a mm database</h1><p>Hi ocat, my pleasure to use metamath is renewed by the new features brought by mmj2. Well Here are the points that could be improved according to me.</p><p>#1 The save/open subsystem has to be improve: one can very easily delete a proof when closing a proof and opening a new one.</p><dl class="quote"><dt /><dd>Please explain the sequence of events. The program does prompt the user to save before beginning a new proof. The hole in the scheme is that the user is not forced to name the file using the name of the theorem. Some people will choose not to save all of the mmj2 proofs because the mmj2 proofs are designed to be Metamath Comments and can be copied, in-toto, into the relevant .mm file (as documentation).<dl class="quote"><dt /><dd>I'm working on a proof. I want to change and work on another one. I choose `open' in the menu, a window appears. This window in fact asks if I want to save the proof and proposes me to change the name but very regularly I forget the meaning of this window, I choose the proof I want to work with and I spoil my work without hope to restore the old version. &#x2013; <a class="local" href="frl">frl</a> 1-Mar-2006<dl class="quote"><dt /><dd>Perhaps changing the message in the Save dialog box would help. If you would like to alter your version of the message to something Francais that might help &#x2013; I provide only the English text now. And I think you must begin to save your work habitually, as if you are afraid the program will crash at any moment and the world depends upon  your proof being completed on time! Just do Alt-F, S frequently and avoid the agony. This reminds me of the old days when the IBM mainframes were very untrustworthy, management was unforgiving, and the systems programmers ridiculed applications programmers who asked for selective restores from pack backups. IBM had a lot of bugs in the old days, even more than Windows, haha. --<a class="local" href="ocat">ocat</a> 1-Mar-2006</dd></dl></dd></dl></dd></dl><p>#2 When the proof is finished, I transfer it to the mm database and it's a pain because the two formats are very different.</p><dl class="quote"><dt /><dd>There are two solutions. RunParms<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParms">?</a> allow the user to specify the left and rightmost columns of the generated Metamath RPN proofs:</dd></dl><pre>    ProofAsstRPNProofLeftCol,5
    ProofAsstRPNProofRightCol,79
    </pre><p>So after the proof is complete and the $= line is generated in the mmj2 proof, simply copy the RPN statement labels into the .mm file &#x2013; which has a free format and simply requires that the RPN labels follow the "$=" and precede "$." in the Metamath $p statement.</p><p>Another (preferable) solution is to wait and see if Norm completes his metamath.exe Import facility. That will provide the capability to jump back and forth between the Metamath.exe and mmj2 Proof Assistants. Since Metamath.exe has many advanced features, such as UPDATING a .mm file, the new Import feature is something I am very excited about. (mmj2 is not presently in the business of updating .mm files &#x2013; though the technical requirements are not exceedingly difficult, the staff at mmj2 demanded a pay raise when management broached the topic and now we're trying to decide whether to outsource the programming staff to India&#x2026;)</p><p>P.S. I am planning to implement the Renumber feature you requested. I hope that renumbering by 1's is sufficient (1, 2, 3, &#x2026; qed)?</p><dl class="quote"><dt /><dd>It will be sufficient, thank you. --<a class="local" href="frl">frl</a> 1-Nov-2006</dd></dl><p>--<a class="local" href="ocat">ocat</a></p><p>&#x2013; <a class="local" href="frl">frl</a> 27-Feb-2006</p></div><div class="footer"><hr /><span class="gotobar bar"><a class="local" href="HomePage">HomePage</a> <a class="local" href="RecentChanges">RecentChanges</a> </span><span class="edit bar"><br /> <a class="edit" accesskey="e" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=mmj2ProofAssistantFeedbackV20060129">Edit this page</a> <a class="history" href="http://planetx.cc.vt.edu/AsteroidMeta?action=history;id=mmj2ProofAssistantFeedbackV20060129">View other revisions</a> <a class="admin" href="http://planetx.cc.vt.edu/AsteroidMeta?action=admin;id=mmj2ProofAssistantFeedbackV20060129">Administration</a></span><span class="time"><br /> Last edited 2006-03-29 03:06 UTC by <a class="author" title="from 66-81-74-156.bayarea.dialup.o1.com" href="ocat">ocat</a> <a class="diff" href="http://planetx.cc.vt.edu/AsteroidMeta?action=browse;diff=1;id=mmj2ProofAssistantFeedbackV20060129">(diff)</a></span><form method="get" action="http://planetx.cc.vt.edu/AsteroidMeta" enctype="application/x-www-form-urlencoded">
<p>Search: <input type="text" name="search"  size="20" accesskey="f" /> <input type="submit" name="dosearch" value="Go!" /></p></form></div>
</body>
</html>
