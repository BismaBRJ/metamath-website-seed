<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html><head><title>AsteroidMeta: mmj2ProofAssistantFeedbackV20070716</title><link type="text/css" rel="stylesheet" href="wiki.css" /><meta name="robots" content="INDEX,NOFOLLOW" /><link rel="alternate" type="application/rss+xml" title="AsteroidMeta" href="index.html@action=rss" /><link rel="alternate" type="application/rss+xml" title="AsteroidMeta: mmj2ProofAssistantFeedbackV20070716" href="http://planetx.cc.vt.edu/AsteroidMeta?action=rss;rcidonly=mmj2ProofAssistantFeedbackV20070716" /></head><body class="http://planetx.cc.vt.edu/AsteroidMeta"><div class="header"><span class="gotobar bar"><a class="local" href="HomePage">HomePage</a> <a class="local" href="RecentChanges">RecentChanges</a> </span><h1><a title="Click to search for references to this page" href="http://planetx.cc.vt.edu/AsteroidMeta?search=mmj2ProofAssistantFeedbackV20070716">mmj2ProofAssistantFeedbackV20070716</a></h1></div><div class="content browse"><p>Previous Version of Feedback: <a class="local" href="mmj2ProofAssistantFeedbackV20061101">mmj2ProofAssistantFeedbackV20061101</a></p><h1>Feedback About the new mmj2 Proof Assistant GUI</h1><p>The policy here at MMJ2 Research Labs, LTD. is to listen to our customers' complaints. We care deeply about your feelings, thoughts and suggestions. Be sincere and honest &#x2013; but please substitute combinations of "!", "@", "#" and "$" for swear and cuss words&#x2026;</p><p>Complaints about other aspects of mmj2 &#x2013; general grievances -- should go here: <a class="local" href="mmj2Feedback">mmj2Feedback</a></p><p>NOTE: It is not necessary to be a member or to register, log-on, or otherwise prepare for making a comment. Simply enable "cookies" on your browser, click on "Edit this page", and type in your comment/question/note. Then "save". It is desired that you identify yourself in some way, and perhaps even add your name to the "guest" list. Make up a pseudonym if you are inclined and use that, if your are security conscious. --<a class="local" href="ocat">ocat</a> </p><hr /><h1>Links</h1><ul><li>mmj2 Main Page: <a class="local" href="mmj2">mmj2</a></li><li>Please use the dedicated page for mmj2 Feedback/Questions: <a class="local" href="mmj2Feedback">mmj2Feedback</a></li></ul><hr /><h1>Things I like about it</h1><p>Thanks for adding the $d  statement generating feature. I've always used  and liked mmj2 (every proof I've submitted to set.mm was done with mmj2) except for the  annoyance of having to add $d  statements. Now proof finding is quicker, easier, and less tedious. :) --<a class="local" href="steverod">steverod</a> 19-May-2007</p><dl class="quote"><dt /><dd>Thanks. I appreciate the info (I had assumed you were using it to accomplish the many feats I  have observed at metamath.org :-) --<a class="local" href="ocat">ocat</a></dd></dl><h1>Installation Grievances</h1><h1>Suggestions and Things I do not like about it</h1><p>1. The proof text area is always in "Insert Mode", and the insert key doesn't toggle between replace and insert.</p><p>2. It does not output proofs in Metamath compressed format.</p><pre>    --&gt; This is not impossible, but it is computationally
        intensive. Given that Metamath.exe now has an
        import/export facility for mmj2 Proof Worksheets,
        the priority of this item is lower than low. The
        reason why it might be done is that there are 
        interesting algorithms for checking for repeated
        subproofs and this is an active area of research.
        My idea is to create a hash key for each node of
        a proof tree and then check a hash table to see
        if the sub-proof already exists for the proof. 
     </pre><p>3. A new design of the PA screen would be easier and better. It should use a "tree" metaphor where the user works on just one proof step branch at a time, and the program only unifies one step at a time.</p><pre>    --&gt; This would simplify certain aspects of the coding,
        particularly those written defensively against 1000
        step proofs requiring unification. It would free
        things up and allow the screen and CPU resources to
        be brought to bear with focused intensity on the 
        problem of proving a single step! </pre><p>4. It would be nice to see the 'qed' step (assertion) on the first display page when browsing existing proofs.</p><pre>    --&gt; This behavior could be added as a RunParm option, and
        possibly via a menu option. Not hard. 
     </pre><p>5. The 'Unify+Get Hints' hint messages should be expanded to show the formulas of the hint assertions, instead of just the labels.</p><pre>   --&gt; OK. Can that be one long text line per assertion, with
       text wrapping (e.g. ax-mp: ph &amp;&amp; ph -&gt; ps ==&gt; ps) or do
       you care about the full TMFF rendering of these messages
       (I assume not...as that would consume vastly more space.)
       In theory, a future version of PA could test each hint
       and see which is a "best fit", and automatically insert
       that with any needed hypotheses -- you could then Edit/Undo
       if dissatisfied (no idea how to guesstimate a "best fit"
       though, and also, shouldn't the user do some of the work?)
     </pre><p>6. The 'Derive' feature ought to conform as closely as possible to the way the metamath.exe Proof Assistant works with respect to entering the Ref labels in RPN order &#x2013; while requiring minimal (or no) other input. As is, for one thing, the mmj2 PA Derive inserts a 'dummy' variable into a generated hypothesis as  replacement for a variable in the Ref'd assertion which is not substituted-for in the (partial) unification substitution tree. In theory mmj2 could pick an unused variable from the Mandatory+Optional Frames &#x2013; or, 'dummy' variables could be enhanced and made 'real' names of substitution expressions (expanding the spec of a Proof Worksheet). Further analysis on the differences between and reconciliation of Metamath.exe and the mmj2 PA's is needed.</p><hr /><p>7.</p><p>Hi O`Cat and Raph.</p><p><strong>On connectivity</strong> since I often use Mmj2 I will use it to show how different formats can lead to difficulties. When you are working on a proof you simply use eimmexp.cmd and eimmimp.cmd to transfer it from Mmj2 to Metamath and back. It is a bit long but it's not really important. The very problem is that the Proof Worksheet format and the mm format doesn't fit together. Suppose for instance that I have begun my proof in Mmj2. I have a d statement, some comments and different scraps of proof that are not connected together. If I want to export this proof to Metamath I must remove the d statements and the comments otherwise eimmimp.cmd doesn't work. Once I am in Metamath the non connected scraps will be linked by dummylinks. Then I work on this proof in Metamath and I translate it back to mmj2. It means that now the proof has no d statement and no comments any longer and that the non-connected statements are now connected with dummy links. Not exactly the same proof as you can guess. The consequence is simple I don't use d statements, nor comments, nor unconnected scraps of proof because I know that I won't be able to export my proof. And to export my proof I need ! On the other hand d statements, comments and unconnected scraps of proof are in my opinion very important features of Mmj2. I wonder if there is not a way to allow to use these features and to ensure that Mmj2 and Metamath are completely connectable. Suppose that a window in Mmj2 contains the main proof. In this window there is no d statement, no comment and there is only one scrap of proof. This way Mmj2 and Metamath are perfectly connectable. In other windows I have added some comments, a d statement and I've tested other unconnected scraps of code. Since they are not in the way of the main proof they can't alter the connection between Metamath and Mmj2. And since we use the extra features of Mmj2 it means O'Cat's intent is respected. &#x2013; <a class="local" href="fl">fl</a> 30-Dec-2006</p><p>Hi <a class="local" href="fl">fl</a> - you raise interesting points concerning communication of unstructured data (<i>Je regrette les horreurs que vous Ã©prouvez.</i>) It is not so easy to retrofit metamath.exe to use Proof Worksheets, and eimm.exe is like a "patch". To the main point, can you go to the mmj2 Proof Assistant wiki page and explain why you need to go back and forth between mmj2 and metamath more than once during proof invention? Perhaps mmj2 can be enhanced to eliminate these multiple round trips! And perhaps &#x2013; <i>horreurs</i> &#x2013; mmj2 can be modified to <i>generate</i> the necessary $d's for you. The problem of comments is fixable, perhas, since the Metamath .mm format allows comments between any tokens, and in theory eimm.exe could export embedded proof comments to a Proof Worksheet. The problem with dummylinks in Metamath is probably unfixable due to the basic design of the Metamath Proof Assistant, which is perhaps inflexible. Essentially then, I am saying, tell me how to make mmj2 fit your needs so that it is unnecessary to export prior to the final update of the .mm file (this would not preclude using metamath.exe simultaneously for searches, etc.) --<a class="local" href="ocat">ocat</a> 30-Dec-2006</p><p>Hi O'Cat, hi Raph and happy new year,</p><p>I will go to the Proof Assistant wiki page  to explain you why I specially need to go back and forth between metamath and mmj2 but I'd like to insist on the general idea of easy communication between softwares before. I will give an example. My favourite text editor is emacs. But many years ago I would use vi. In fact we could think I've completely abandonned vi. But it's wrong. I still use vi for many reasons. I use it less than emacs  but I use it. In fact these softwares have been designed with very different interfaces. And I can't really say that one is  better than the other. Depends on the occasion in fact. So as  you can imagine I would  be very annoyed if the same file format  were not used by emacs and vi. It's true for other softwares as well. For instance midnight commander is quite an old piece of software. However I often come back to it. (By the way if somebody can send  me an exemplary of the venerable Turbo debugger I will be very happy.) <a class="local" href="fl">fl</a> 2-Jan-2007</p><p>Hi fl, happy new year.</p><p>I am sorry that your experience with mmj2 &lt;&lt;==&gt;&gt; eimm &lt;&lt;==&gt;&gt; metamath  is <i>lossy</i>. Originally eimm.exe did not exist :) Then Norm spent a few moments and typed it in. In theory he can make changes, assuming that the effort can be cost-justified and it pleases him to spend his time that way. He never set out to fully translate mmj2 ProofWorksheets<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=ProofWorksheets">?</a>, especially <b>not</b> incomplete or error-ridden proofs-in-progress &#x2013; that is hard work and intricate! Plus, the Metamath Proof Assistant doesn't even <b>do</b> Distinct Variable Restrictions. I think it would be relatively simple to delete the "dummy proof" steps and re-convert back to just "?" (missing / unknown hypotheses). He might even be able to cache the original Proof Worksheet Header, Footer, $d's, and Comments &#x2013; and then re-insert the modified proof; that might not be crazy-hard.</p><p>I share your concerns about communication between software packages that <i>ought</i> to be able to interoperate well. I am now investigating OMDoc, and I think it may interest you as well. Of course, assuming that "mmj3" wrote to OMDoc standards, there is a strong likelihood that mmj2 would stay ignorant about some of the information in an OMDoc object.</p><p>For now I am happy to see that you are contributing hundreds of theorems to Metamath, and I assume that you continue to use mmj2, remaining 95% happy with its performance.</p><p>P.S. <a class="local" href="fl">fl</a> The original "design" of the mmj2 Proof Assistant intended for the user to manually copy a finished RPN-format proof into the .mm file used. Then eimm.exe allowed less painful importation/export, but <i>lossy</i>. So what, I ask, do you need from the metamath.exe that mmj2 does not provide in Proof Assistancy &#x2013; besides searching with wild cards, which you could do even without eimm.exe by simply running mmj2 and metamath simultaneously. I cannot guarantee a fix for what you want, not within the existing PA framework, :-0)</p><p>--<a class="local" href="ocat">ocat</a> 2-Jan-2007</p><hr /><p>I am tied up with some things right now that are slowing down even set.mm, and I won't have time to work on  <a class="url outside" href="http://us2.metamath.org:8888/index.html#eimm">eimm</a> for a little while. But I tried to make the comments in eimm.c reasonably clear, if someone wants to enhance it to make it work in a way they are happier with. It is not terribly difficult code, mostly just parsing the worksheet and the MM-PA output, with lots of bug checking (especially that the expected command sequence was used to generate the MM-PA output). The eimm.c program is about 900 lines long, excluding a standard string library taken from metamath, and the import and export functions are each around 300 lines each. Some observations:</p><p>1. Retaining comments is a difficult problem. Although the Metamath syntax allows them in proofs, as a practical matter it is difficult to keep them associated with proof steps when proofs are compressed, minimized, reworked, etc. So, they are just discarded by any of the save proof and save new_proof commands in the metamath program, and I don't see that behavior changing anytime soon if ever. The question is, can they be retained in the worksheets?</p><p>I suppose that if a previous worksheet exists during export, the program could attempt to put the comments back into the new worksheet - but correlating them with the proof steps after the proof has undergone a number of transformations doesn't seem easy. Perhaps you can think of an approximate matching algorithm that works most of the time for minor changes; if so, feel free to put it in the program. Perhaps it could flag comments (with a special notation in the comment itself - not with error messages during the program run, which would be more difficult to match up if anyone even pays attention to them flying off the screen) that it couldn't figure out where to put them, and just make a best guess by putting them somewhere between the surrounding ones that it could figure out.</p><p>Note, by the way, that a previous version of a file created by eimm.c is not immediately deleted but is renamed to filename~1, any previous filename~1 renamed to filename~2, up to filename~9; a previous ~9 is deleted. Using this philosophy in metamath has saved me a lot of grief over the years due to stupid editing mistakes, even though it clutters up the disk - so every now and then I do rm *~[1-9] or rm *~[2-9]. Or you can add that to the eimm script if you hate them.</p><dl class="quote"><dt /><dd>Confession: during the input .mm file parse &#x2013; low level routine &#x2013; mmj2 <i>discards</i> comments that are between tokens in a Metamath statement. When I wrote that code I overlooked the Metamath.pdf specification allowing them, and I had to write a crufty patch to make them disappear within the low-level code (didn't want to re-formulate the algorithm.) Also, not until I wrote the mmj2 PA did I fully understand the <i>deep</i> structure of a Metamath proof; considering it as an array of statement labels in RPN sequence, I could not imagine a good way to associate a comment with an individual "step". Now I see that the <i>major</i> steps correspond to (end at) the assertion labels for non-syntax axioms and theorems/derivations. So  a proof might have 10 major steps and contain 296 minor steps. But even that is inadequate because of repeated sub-proofs: the final major proof step's proof tree contains as sub-trees the proof trees of the previous major proof steps.</dd></dl><p>2. I think that the dummylinks that are inserted by import (in order to create a legal MM-PA partial proof) could probably be stripped back out during export without a whole lot of difficulty, thus restoring the orphaned status to isolated proof scraps, although I haven't looked at it.</p><p>I think you know that dummylinks in a finished proof are automatically cleaned out by the MM-PA "minimize_with */brief" command, with any unused proof scraps they connect to discarded.</p><p>3. I am unclear on what the issue is with $d's. They are not handled by MM-PA, and even though this is an item on my to-do list, I won't get to it soon. Elsewhere on this wiki I've wondered if  I even want them handled in MM-PA, because they may just be a nuisance during proof development, and it may be easier just to fix all at once in the end anyway like we do now. As for automatic generation of them, that would be a nice feature for metamath and/or mmj2; I'll add it to my to-do list for metamath. But for now, there is a script I use to collect them on the <a class="local" href="metamathMathQuestions">metamathMathQuestions</a> page. It isn't completely automated, but the time I spend putting them in at the end is a very minor part of the total time I spend on the proof itself.</p><dl class="quote"><dt /><dd>We have already established that two theorems that are identical except for their $d stipulations are truly <i>different</i> theorems. And a little-advertised aspect of the mmj2 PA is that the  unification search process will attempt to hunt down the correct unifying assertion &#x2013; the one without any $d errors. That took a fair amount of coding work, but it is done now. Also, if the user inputs a label and $d errors result, the program reports back on any alternate unifications.<dl class="quote"><dt /><dd>Yes, metamath's MM-PA definitely assumes you know what you're doing and requires experience to use it effectively. It lets you construct proofs that won't verify when you add in the desired $d's. It lets you construct partial proofs with unifications that are impossible when you try to fill in the syntax-building steps. It is only when the proof is done that you can know for certain that it was done right. <a class="local" href="norm">norm</a></dd></dl></dd><dt /><dd>I think that automatically generating $d's in mmj2 would be very doable. Also, the Proof Worksheet format includes a "$d" statement which, in theory, could be imported/exported by eimm. The $d stipulations of the Proof Worksheet are <i>additive</i> to the existing $d's in the theorem under discussion and normally appear at the beginning of the Proof Worksheet just after the "Header" statement.</dd><dt /><dd>.</dd><dt /><dd>With respect to eimm handing incomplete and/or error-ridden Proof Worksheets, I am skeptical because the amount of work in parsing and validating a Proof Worksheet is considerable. What I want to know is what motivates the user to make  multiple round-trips between mmj2 and metamath so that the omissions and inadequate functions of mmj2 can be remedied. --<a class="local" href="ocat">ocat</a></dd></dl><p>&#x2013; <a class="local" href="norm">norm</a> 4 Jan 2007</p><hr /><p><a class="local" href="norm">norm</a> here again: While I know it takes roughly 10 times as long to read someone else's code as to rewrite it from scratch, :) you may want to give at least a passing glance at the algorithm in the Metamath Solitaire applet's "Proof Assistant". It may contain some ideas you can utilize for the mmj2/3, particularly since it has complete and foolproof $d handling. Compared to metamath's MM-PA, it is an extreme in the other direction.</p><ul><li>It is impossible to construct a proof that won't verify when you're done.</li><li>It handles $d's correctly.</li><li>It shows you only those choices that unify with the current proof step.</li><li>Among those choices, it excludes the ones that would result in intrinsic ("variable in common") $d violations.</li><li>It constructs the required $d's as the proof is built.</li><li>It allows you to construct independent, isolated proof scraps.</li><li>There are literally no error messages, because it is impossible for an error to occur: the only choices you have at any point are legal ones.</li></ul><p>The algorithm is simple, clean, and robust, I think. Its main requirement is that it needs to work with Polish notation, but mmj2 already parses things to a form I assume could be converted to Polish, if it doesn't already use Polish internally. I haven't analyzed its speed but am unaware of anything about it that is fundamentally slower than other unification algorithms. The limitations of MM Solitaire are not with its algorithm, but with the program wrapped around it, which is just a simple-minded applet demo of the algorithm. What the algorithm needs is a proper program to contain it. &#x2013; <a class="local" href="norm">norm</a> 4 Jan 2007</p><dl class="quote"><dt /><dd>That is a great idea. It is also in line with one of <a class="local" href="fl">fl</a>'s suggestions about focusing on one step at a time in the PA (which would allow all resources to be brought to bear in one place, for one purpose, for the benefit of the user).<dl class="quote"><dt /><dd>And for your benefit as well I think since sometimes mmj2 enters loops for reasons totally obscure to me. But I don't know what you mean by <em>tree</em>. If it means that you want to change the interface please, my dear O'Cat, don't ! The <em>plain text list</em> design pattern that you use currently is perfect in my opinion. The only interface change I would appreciate is a multi-tab interface. &#x2013; <a class="local" href="fl">fl</a> 5-Jan-2006<dl class="quote"><dt /><dd>"tree" is internal &#x2013; the data structure (can be converted to Metamath RPN format). The "plain text list" won't change, but maybe an "mmj3" will happen some time :) I don't know about  multi-tabbing mmj2's PA either &#x2013; it might be cheaper to just buy you a second computer :-)<dl class="quote"><dt /><dd>I think multi-tabbing would be a great feature for mmj2 or mmj3. An  example of very good editor using that technic is kdevelop : [<a class="url number" href="http://www.kdevelop.org/graphics/screenshots/3.4/qmreload.png"><span><span class="bracket">[</span>1<span class="bracket">]</span></span></a>]. PA means  what ?</dd></dl></dd><dt /><dd>If you see a "loop" it would probably be a thread exception halting activity: hit the Cancel menu item to get cursor control back, then switch back to the Command Prompt window and you should see a mini-dump from the Java Runtime Environment. Then please copy the info and shoot it to me. --<a class="local" href="ocat">ocat</a><dl class="quote"><dt /><dd>I will but you should try to make long proofs with mmj2 otherwise there will be many phenomenons that you will never be aware of and I think if you don't force yourself to  do that you will never be able to take the good design decisions. In fact a directory of test cases is not enough. Free weight is mandatory in computer design as in body building&#x2013; <a class="local" href="fl">fl</a></dd></dl></dd></dl></dd></dl></dd></dl><p>Re: "While I know it takes roughly 10 times as long to read someone else's code as to rewrite it from scratch, :)" ==&gt; So, you <i>do</i> have a sense of humor! Haha. I don't <i>fear</i> your code :)</p><p>--<a class="local" href="ocat">ocat</a></p><h1>Bugs</h1><p>5-Jan-2007: "&#x2026;sometimes mmj2 enters loops for reasons totally obscure to me." --<a class="local" href="fl">fl</a></p><p>==&gt; If you see what appears to be a "loop" it is <i>probably</i> a thread  exception that has already halted activity. Hit the Cancel menu item to  get cursor control back, then switch back to the Command Prompt window and you should see a mini-dump from the Java Runtime Environment. Then please copy the info and shoot it to me along with a copy of the Proof Worksheet at the time of the "incident" (you can Edit/Copy from the GUI text area to capture the proof text as-is).</p><p>A "Thread Exception" could be caused by a Null Pointer Exception. Another possibility for an apparent "loop" is an Out Of Memory or Heap shortage (I saw this, I think, when texting Sphinx-4). To check memory click on Help/About, which does a garbage collection pass and then reports on memory utilization &#x2013; if your machine is running low on memory (I don't know how much you have), there are RunParms to reduce utilization when the .mm file is loaded. Look in mmj2\data\runparms\windows\AnnotatedRunParms<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=AnnotatedRunParms">?</a>.txt at:</p><pre>        LoadEndpointStmtLabel,FermatsNextToLastTheorem    
        LoadComments,yes     
        LoadProofs,yes     
     </pre><p>Switch to "LoadComments<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=LoadComments">?</a>,no" and "LoadProofs<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=LoadProofs">?</a>,no" for a big saving, and if your theorem of interest is not near the end of the file, specify "LoadEndpointStmtLabel<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=LoadEndpointStmtLabel">?</a>,loc-after-label" where loc-after-label is the label of the .mm statement prior to the insert point of your theorem.</p><p>If possible, send me the diagnostic info ASAP so that I can get your code fixed up. You are my best customer and I want you to be happy :) --<a class="local" href="ocat">ocat</a> 5-Jan-2007 </p><dl class="quote"><dt /><dd>Thank you I will try use mmj2 intensively to get some nice "loops".</dd></dl><p>Hi, I didn't mention this earlier today but the new release has <i>suggested</i> options for the Java environment as a workaround to various memory related "issues". I described them here: <a class="url outside" href="mmj2UsageNote20061019">mmj2UsageNote20061019</a>. If you are using the pre-11/1 mmj2.bat then that might be a contributing factor to what you perceive as a "loop". The mmj2.bat should look basically like this:</p><p>java -Xincgc -Xms64M -Xmx128M -jar mmj2.jar RunParms<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParms">?</a>.txt</p><p>Those options are described in the link (and the mmj2.zip). I would prefer to find out that there is a memory leak in the JRE than a null pointer in mmj2 :-) If, as you say you are doing these huge proofs then "incremental garbage collection" and large initial memory allocations would help &#x2013; and the memory-conserving RunParm<a class="edit" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=RunParm">?</a> options I described above. Also, downloading the latest JRE version from Sun would be a wise idea (I know for a fact they patch Java a <i>lot</i> &#x2013; it is not at all bug free!)</p><p>--<a class="local" href="ocat">ocat</a> 5-Jan-2007</p><h1>Talk</h1></div><div class="footer"><hr /><span class="gotobar bar"><a class="local" href="HomePage">HomePage</a> <a class="local" href="RecentChanges">RecentChanges</a> </span><span class="edit bar"><br /> <a class="edit" accesskey="e" title="Click to edit this page" href="http://planetx.cc.vt.edu/AsteroidMeta?action=edit;id=mmj2ProofAssistantFeedbackV20070716">Edit this page</a> <a class="history" href="http://planetx.cc.vt.edu/AsteroidMeta?action=history;id=mmj2ProofAssistantFeedbackV20070716">View other revisions</a> <a class="admin" href="http://planetx.cc.vt.edu/AsteroidMeta?action=admin;id=mmj2ProofAssistantFeedbackV20070716">Administration</a></span><span class="time"><br /> Last edited 2007-07-18 04:05 UTC by <a class="author" title="from 66-81-74-153.bayarea.dialup.o1.com" href="ocat">ocat</a> <a class="diff" href="http://planetx.cc.vt.edu/AsteroidMeta?action=browse;diff=1;id=mmj2ProofAssistantFeedbackV20070716">(diff)</a></span><form method="get" action="http://planetx.cc.vt.edu/AsteroidMeta" enctype="application/x-www-form-urlencoded">
<p>Search: <input type="text" name="search"  size="20" accesskey="f" /> <input type="submit" name="dosearch" value="Go!" /></p></form></div>
</body>
</html>
